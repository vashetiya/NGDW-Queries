/*

drop table TMP_WF_PAT_PARTY
drop table TMP_WF_PAT_MARKET
drop table TMP_WF_PAT_SOURCE
drop table TMP_WF_PAT_MERGE_RECORDS
drop table TMP_WF_PAT_COMBINED

*/

-----------------------------------------------------------------------------------------------------------------------------
Create Table TMP_WF_PAT_PARTY as (

SELECT DISTINCT 'PAT' AS FEED_ORIGIN,
PARTY_PAT.PARTY_FK,
PARTY.MDM_KEY AS PARTY_MASTER_ID,
PARTY_PAT.SALUTATION AS SALUTATION,
PARTY_PAT.FIRST_NAME AS FIRST_NAME,
PARTY_PAT.MIDDLE_NAME AS MIDDLE_NAME,
PARTY_PAT.LAST_NAME AS LAST_NAME,
PARTY_PAT.TITLE AS TITLE,
PARTY_PAT.SUFFIX AS SUFFIX,
TEMP_CODE.VALUE AS GENDER_CODE,
TO_DATE(TO_CHAR(PARTY_PAT.BIRTH_DT,'MM/DD/YYYY'),'MM/DD/YYYY') AS BIRTH_DATE,
--TO_DATE(PARTY_PAT.BIRTH_DT,'MM/DD/YYYY') AS BIRTH_DATE,
 CASE WHEN PARTY_PAT.BIRTH_DT IS NOT NULL THEN FLOOR(TO_NUMBER(SYSDATE - TO_DATE(TO_CHAR(PARTY_PAT.BIRTH_DT,'MM/DD/YYYY'),'MM/DD/YYYY'))/365.2425) END as Age,
--TO_NUMBER(substr((TO_CHAR(PARTY_PAT.BIRTH_DT,'MM/DD/YYYY')),7,11)) as Birth_Year,
TEMP_CODE_1.VALUE AS PATIENT_TYPE_CODE,
PARTY_ADDRESS.ADDRESS_LINE_1 AS ADDRESS_LINE_1,
PARTY_ADDRESS.ADDRESS_LINE_2 AS ADDRESS_LINE_2,
PARTY_ADDRESS.COUNTRY_NAME AS COUNTRY_NAME,
PARTY_ADDRESS.STATE_NAME AS STATE_NAME,
PARTY_ADDRESS.COUNTY_NAME AS COUNTY_NAME,
PARTY_ADDRESS.CITY_NAME AS CITY_NAME,
PARTY_ADDRESS.POSTAL_CD AS POSTAL_CODE,
--'' AS ALLOWED_FLG,
'PAT' AS PARTY_TYPE,
TEMP_CODE_2.VALUE AS PATIENT_CLASS,
COMM_PHONE.PHONE_NUMBER, ---- This is added as part of PHONE_NUMBER change for ET
COMM_MAIL.COMM_VALUE AS PRIMARY_EMAIL,
PARTY_PAT.LAST_LOAD_TS AS CREATE_DATE,
'N' AS SUPPRESSED_CODE,
(CASE TRIM(RECORD_CODE.CODE_NAME) WHEN 'ACTIVE' THEN 'A'
WHEN 'DELETED' THEN 'D'
WHEN 'INACTIVE' THEN 'I'
ELSE '' END) AS RECORD_STATE,
SYSDATE AS LAST_LOAD_TS

FROM
(
	SELECT * FROM (SELECT DISTINCT A1.PARTY_FK AS PARTY_FK,
	A2.MDM_KEY AS MDM_KEY
	FROM
	(
	 SELECT PARTY_FK AS PARTY_FK FROM DH_IDS.IDS_PARTY_PATIENT 
	 UNION
	 SELECT PARTY_FK AS PARTY_FK FROM DH_IDS.IDS_PARTY_CONTACT
	) A1
	INNER JOIN
	DH_IDS.IDS_PARTY A2
	ON A1.PARTY_FK = A2.PARTY_SK
	AND TRIM(A2.MDM_KEY) LIKE 'LH%'
	AND A2.PRIMARY_COUNTRY_FK IN (SELECT COUNTRY_SK  FROM DH_IDS.IDS_COUNTRY_CODE RDC_COUNTRY_CODE WHERE ISO_2_CD = 'US') 
	AND A2.MDM_KEY IS NOT NULL
	INNER JOIN
	DH_IDS.IDS_PARTY_MARKET MKT ON A2.PARTY_SK = MKT.PARTY_FK
	AND MKT.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')
	INNER JOIN
	DH_IDS.IDS_THERAPEUTIC_AREA THPY
	ON MKT.THERAPEUTIC_AREA_FK=THPY.THERAPEUTIC_AREA_SK
	AND THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')
	INNER JOIN
	DH_IDS.IDS_THERAPEUTIC_AREA PAR_THPY ON THPY.PARENT_THERAPEUTIC_AREA_FK = PAR_THPY.THERAPEUTIC_AREA_SK
	AND PAR_THPY.THERAPEUTIC_AREA IN ('NEUROLOGY','HEMATOLOGY')
	AND PAR_THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')
    )
) PARTY
INNER JOIN
DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
ON PARTY_PAT.PARTY_FK = PARTY.PARTY_FK
AND PARTY.MDM_KEY IS NOT NULL

LEFT OUTER JOIN 
	(SELECT DISTINCT PARTY_FK,
	COMM_VALUE AS PHONE_NUMBER,
	COMM_RANK FROM
	 (SELECT PARTY_FK,
     TO_CHAR(EFFECTIVE_DT,'DD/MM/YYYY HH24:MI:SS') AS EFFECTIVE_DT,
	 INTEGRATION_KEY,
	 COMM_VALUE,
	 ROW_NUMBER() OVER (PARTITION BY PARTY_FK ORDER BY TO_DATE(TO_CHAR(EFFECTIVE_DT,'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS') DESC,INTEGRATION_KEY DESC) AS COMM_RANK
	FROM DH_IDS.IDS_PARTY_COMMUNICATION 
	WHERE COMMUNICATION_TYPE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(CODE_NAME) LIKE '%PHONE_1%')
	AND RECORD_STATE_CD_FK IN (SELECT DISTINCT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(CODE_NAME) = 'ACTIVE' AND UPPER(ACTIVE_FLG)= 'Y')) WHERE COMM_RANK = 1
	) COMM_PHONE
	ON PARTY.PARTY_FK = COMM_PHONE.PARTY_FK

LEFT OUTER JOIN  
	(SELECT * FROM 
		(SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'GENDER_CODE' AS TYPE_CODE,
		PARTY_PAT.GENDER_CD_FK AS ID,
		GNDR_CODE.CODE_NAME AS VALUE
		FROM
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
		LEFT OUTER JOIN
		DH_IDS.IDS_CODE GNDR_CODE
		ON PARTY_PAT.GENDER_CD_FK = GNDR_CODE.CODE_SK
		UNION
		SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'PATIENT_TYPE_CODE' AS TYPE_CODE,
		PARTY_PAT.PATIENT_TYPE_CD_FK AS ID,
		PAT_TYP_CODE.CODE_NAME AS VALUE
		FROM
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
		LEFT OUTER JOIN
		DH_IDS.IDS_CODE PAT_TYP_CODE
		ON PARTY_PAT.PATIENT_TYPE_CD_FK = PAT_TYP_CODE.CODE_SK
		UNION
		SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'PATIENT_CLASS' AS TYPE_CODE,
		PARTY.PARTY_SUBTYPE_CD_FK AS ID,
		(SELECT NVL(SUBSTR(PARTY_CODE.CODE_NAME, 0, INSTR(PARTY_CODE.CODE_NAME, ',')-1), PARTY_CODE.CODE_NAME) from dual) AS VALUE
--PARTY_CODE.CODE_NAME AS VALUE
	    FROM
	    DH_IDS.IDS_PARTY PARTY
		INNER JOIN
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT ON PARTY_PAT.PARTY_FK = PARTY.PARTY_SK
	    LEFT OUTER JOIN
		DH_IDS.IDS_CODE PARTY_CODE
		ON PARTY.PARTY_SUBTYPE_CD_FK = PARTY_CODE.CODE_SK
		)
	) TEMP_CODE
ON TEMP_CODE.PARTY_FK = PARTY.PARTY_FK
AND TEMP_CODE.TYPE_CODE = 'GENDER_CODE'

LEFT OUTER JOIN
	(SELECT * FROM 
		(SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'GENDER_CODE' AS TYPE_CODE,
		PARTY_PAT.GENDER_CD_FK AS ID,
		GNDR_CODE.CODE_NAME AS VALUE
	FROM
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
		LEFT OUTER JOIN
		DH_IDS.IDS_CODE GNDR_CODE ON PARTY_PAT.GENDER_CD_FK = GNDR_CODE.CODE_SK
	UNION
		SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'PATIENT_TYPE_CODE' AS TYPE_CODE,
		PARTY_PAT.PATIENT_TYPE_CD_FK AS ID,
		PAT_TYP_CODE.CODE_NAME AS VALUE
	FROM
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
	LEFT OUTER JOIN
		DH_IDS.IDS_CODE PAT_TYP_CODE ON PARTY_PAT.PATIENT_TYPE_CD_FK = PAT_TYP_CODE.CODE_SK
	UNION
		SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
		'PATIENT_CLASS' AS TYPE_CODE,
		PARTY.PARTY_SUBTYPE_CD_FK AS ID,
		(SELECT NVL(SUBSTR(PARTY_CODE.CODE_NAME, 0, INSTR(PARTY_CODE.CODE_NAME, ',')-1), PARTY_CODE.CODE_NAME) from dual) AS VALUE
--PARTY_CODE.CODE_NAME AS VALUE
	FROM
		DH_IDS.IDS_PARTY PARTY
	INNER JOIN
		DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
	ON PARTY_PAT.PARTY_FK = PARTY.PARTY_SK
	LEFT OUTER JOIN
		DH_IDS.IDS_CODE PARTY_CODE
	ON PARTY.PARTY_SUBTYPE_CD_FK = PARTY_CODE.CODE_SK
		)
	) TEMP_CODE_1
ON TEMP_CODE_1.PARTY_FK = PARTY.PARTY_FK
AND TEMP_CODE_1.TYPE_CODE = 'PATIENT_TYPE_CODE'

LEFT OUTER JOIN
	(SELECT DISTINCT PARTY_FK,
	ADDRESS_LINE_1 AS ADDRESS_LINE_1,
	ADDRESS_LINE_2 AS ADDRESS_LINE_2,
	COUNTRY_NAME AS COUNTRY_NAME,
	STATE_NAME AS STATE_NAME,
	COUNTY_NAME AS COUNTY_NAME,
	CITY_NAME AS CITY_NAME,
	POSTAL_CODE AS POSTAL_CD,
	COMM_RANK FROM
		(SELECT PARTY_FK,
		ADDRESS_LINE_1 AS ADDRESS_LINE_1,
		ADDRESS_LINE_2 AS ADDRESS_LINE_2,
		COUNTRY_NAME AS COUNTRY_NAME,
		STATE_NAME AS STATE_NAME,
		COUNTY_NAME AS COUNTY_NAME,
		CITY_NAME AS CITY_NAME,
		POSTAL_CD AS POSTAL_CODE,
		INTEGRATION_KEY,
		ROW_NUMBER() OVER (PARTITION BY PARTY_FK ORDER BY TO_DATE(TO_CHAR(LAST_LOAD_TS,'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS') DESC, INTEGRATION_KEY DESC) AS COMM_RANK
		FROM DH_IDS.IDS_PARTY_ADDRESS 
		WHERE PRIMARY_ADDRESS_FLG = 'Y'
		AND CURRENT_FLG = 'Y'
		AND BOUNCED_INFORM_FLG='N'--- Added as part of JIRA ETL-2684 
		AND RECORD_STATE_CD_FK IN (SELECT DISTINCT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME)) = 'ACTIVE' AND UPPER(TRIM(ACTIVE_FLG)) = 'Y')) 
	WHERE COMM_RANK = 1
	) PARTY_ADDRESS
ON PARTY.PARTY_FK = PARTY_ADDRESS.PARTY_FK

LEFT OUTER JOIN
	(SELECT * FROM (SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
	'GENDER_CODE' AS TYPE_CODE,
	PARTY_PAT.GENDER_CD_FK AS ID,
	GNDR_CODE.CODE_NAME AS VALUE
	FROM
	DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
	LEFT OUTER JOIN
	DH_IDS.IDS_CODE GNDR_CODE
	ON PARTY_PAT.GENDER_CD_FK = GNDR_CODE.CODE_SK
	UNION
	SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
	'PATIENT_TYPE_CODE' AS TYPE_CODE,
	PARTY_PAT.PATIENT_TYPE_CD_FK AS ID,
	PAT_TYP_CODE.CODE_NAME AS VALUE
	FROM
	DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
	LEFT OUTER JOIN
	DH_IDS.IDS_CODE PAT_TYP_CODE
	ON PARTY_PAT.PATIENT_TYPE_CD_FK = PAT_TYP_CODE.CODE_SK
	UNION
	SELECT DISTINCT PARTY_PAT.PARTY_FK AS PARTY_FK,
	'PATIENT_CLASS' AS TYPE_CODE,
	PARTY.PARTY_SUBTYPE_CD_FK AS ID,
	(SELECT NVL(SUBSTR(PARTY_CODE.CODE_NAME, 0, INSTR(PARTY_CODE.CODE_NAME, ',')-1), PARTY_CODE.CODE_NAME) from dual) AS VALUE
	FROM
	DH_IDS.IDS_PARTY PARTY
	INNER JOIN
	DH_IDS.IDS_PARTY_PATIENT PARTY_PAT
	ON PARTY_PAT.PARTY_FK = PARTY.PARTY_SK
	LEFT OUTER JOIN
	DH_IDS.IDS_CODE PARTY_CODE
	ON PARTY.PARTY_SUBTYPE_CD_FK = PARTY_CODE.CODE_SK)
	) TEMP_CODE_2

ON TEMP_CODE_2.PARTY_FK = PARTY.PARTY_FK
AND TEMP_CODE_2.TYPE_CODE = 'PATIENT_CLASS'

LEFT OUTER JOIN
DH_IDS.IDS_CODE RECORD_CODE
ON RECORD_CODE.CODE_SK = PARTY_PAT.RECORD_STATE_CD_FK

LEFT OUTER JOIN --DH_IDS.TMP_COMM_EMAIL COMM_MAIL
	(SELECT * FROM (SELECT DISTINCT PARTY_FK,COMM_VALUE,COMM_RANK FROM
		(SELECT PARTY_FK,TO_CHAR(EFFECTIVE_DT,'DD/MM/YYYY HH24:MI:SS') AS EFFECTIVE_DT,INTEGRATION_KEY,COMM_VALUE,
		ROW_NUMBER() OVER (PARTITION BY PARTY_FK ORDER BY TO_DATE(TO_CHAR(EFFECTIVE_DT,'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS') DESC, INTEGRATION_KEY DESC) AS COMM_RANK FROM DH_IDS.IDS_PARTY_COMMUNICATION 
		WHERE COMMUNICATION_TYPE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME)) LIKE '%EMAIL_1%')
		AND PRIMARY_FLG = 'Y' AND BOUNCED_INFORM_FLG = 'N' OR BOUNCED_INFORM_FLG IS NULL
		AND RECORD_STATE_CD_FK IN (SELECT DISTINCT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME)) = 'ACTIVE' AND UPPER(TRIM(ACTIVE_FLG)) = 'Y')) WHERE COMM_RANK = 1)
	) COMM_MAIL
ON PARTY.PARTY_FK = COMM_MAIL.PARTY_FK
WHERE PARTY.PARTY_FK > 0
) 



--------------------------------------------------------------------------------------------------------------------------------------


Create Table  TMP_WF_PAT_MARKET 
as
( Select distinct Party_Sk,CHILD_THERAPEUTIC_AREA from(
WITH GLOBAL_EXT_CRET AS (
SELECT DISTINCT A1.PARTY_FK AS PARTY_SK,
A2.MDM_KEY AS MDM_KEY, A2.PARTY_TYPE_CD_FK PARTY_TYPE_CD_FK
FROM
(SELECT TRIM(PARTY_FK) AS PARTY_FK FROM DH_IDS.IDS_PARTY_PATIENT 
UNION
SELECT TRIM(PARTY_FK) AS PARTY_FK FROM DH_IDS.IDS_PARTY_CONTACT) A1
INNER JOIN

DH_IDS.IDS_PARTY A2
ON A1.PARTY_FK = A2.PARTY_SK
AND TRIM(A2.MDM_KEY) LIKE 'LH%'
AND A2.PRIMARY_COUNTRY_FK IN (SELECT COUNTRY_SK  FROM DH_RDM_PUBLISH.RDC_COUNTRY_CODE RDC_COUNTRY_CODE WHERE ISO_2_CD = 'US') -- Filter added as a part of ETL-1665
INNER JOIN

DH_IDS.IDS_PARTY_MARKET MKT
ON A2.PARTY_SK = MKT.PARTY_FK
AND MKT.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')
INNER JOIN

DH_IDS.IDS_THERAPEUTIC_AREA THPY
ON MKT.THERAPEUTIC_AREA_FK=THPY.THERAPEUTIC_AREA_SK
AND THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')

INNER JOIN
DH_IDS.IDS_THERAPEUTIC_AREA PAR_THPY
ON THPY.PARENT_THERAPEUTIC_AREA_FK = PAR_THPY.THERAPEUTIC_AREA_SK
AND PAR_THPY.THERAPEUTIC_AREA IN ('NEUROLOGY','HEMATOLOGY')
AND PAR_THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')

/*INNER JOIN
DH_IDS.IDS_PARTY_ADDRESS ADDRESS
ON A2.PARTY_SK = ADDRESS.PARTY_FK
AND ADDRESS.COUNTRY_NAME='US'
AND ADDRESS.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')*/ --Changed as a part of ETL-1665
)

SELECT DISTINCT 'PAT' AS FEED_ORIGIN,
to_char(MKT.PARTY_MARKET_SK) AS PATIENT_THERAPY_ID,
PARTY.MDM_KEY AS PARTY_MASTER_ID,
PARTY.PARTY_SK,
PAR_THPY.THERAPEUTIC_AREA AS PARENT_THERAPEUTIC_AREA,
CHILD_THPY.THERAPEUTIC_AREA AS CHILD_THERAPEUTIC_AREA,
SRC.SOURCE_NAME AS SOURCE,
PROD_BRND.BRAND_NAME AS PRODUCT_BRAND,
MKT.EFFECTIVE_DT AS THERAPY_START_DATE,
MKT.EXPIRY_DT AS THERAPY_END_DATE,
(CASE WHEN UPPER(PARTY_MARKET_STATUS) = 'CURRENT THERAPY' THEN 'Y' ELSE 'N' END) AS CURRENT_FLAG,
SYSDATE AS LAST_LOAD_TS,
(CASE TRIM(CODE.CODE_NAME) WHEN 'ACTIVE' THEN 'A'
WHEN 'DELETED' THEN 'D'
WHEN 'INACTIVE' THEN 'I'
ELSE '' END) AS RECORD_STATE
FROM
DH_IDS.IDS_PARTY_MARKET MKT
INNER JOIN
DH_IDS.IDS_PRODUCT_BRAND PROD_BRND
ON PROD_BRND.PRODUCT_BRAND_SK = MKT.PRODUCT_BRAND_FK
--AND MKT.LAST_LOAD_TS >  (SELECT EXTRACT_DATE FROM DH_ABC.T_DATE_PARAM_CTRL WHERE ETL_NAME = 'ETL_OUT_EXTGT_PAT_THERAPY_DATE_PARAM_IDS_PARTY_MARKET_DLY')

LEFT OUTER JOIN
DH_IDS.IDS_SOURCE_CODE SRC
ON MKT.SOURCE_FK = SRC.SOURCE_SK

LEFT OUTER JOIN
DH_IDS.IDS_CODE CODE
ON CODE.CODE_SK = MKT.RECORD_STATE_CD_FK

INNER JOIN
GLOBAL_EXT_CRET PARTY
ON MKT.PARTY_FK = PARTY.PARTY_SK

INNER JOIN
DH_IDS.IDS_THERAPEUTIC_AREA CHILD_THPY
ON CHILD_THPY.THERAPEUTIC_AREA_SK = MKT.THERAPEUTIC_AREA_FK 
AND CHILD_THPY.PARENT_THERAPEUTIC_AREA_FK NOT IN (-1)
--AND CHILD_THPY.THERAPEUTIC_AREA IN ('NEUROLOGY','HEMATOLOGY')

INNER JOIN
DH_IDS.IDS_THERAPEUTIC_AREA PAR_THPY
ON CHILD_THPY.PARENT_THERAPEUTIC_AREA_FK = PAR_THPY.THERAPEUTIC_AREA_SK
AND PAR_THPY.THERAPEUTIC_AREA IN ('NEUROLOGY','HEMATOLOGY')
) where CHILD_THERAPEUTIC_AREA in ('MULTIPLE SCLEROSIS','SPINAL MUSCULAR ATROPHY')
)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create Table  TMP_WF_PAT_SOURCE as 
(select * from 
(
WITH PM AS 
 (Select PARTY_SK, case when Th_Indicator = 1 then 'SPINAL MUSCULAR ATROPHY' else 'MULTIPLE SCLEROSIS' end as CHILD_THERAPEUTIC_AREA from 
(
Select PARTY_SK,max(Therapeutic_Area_Flag) as Th_Indicator from (
select PARTY_SK,CHILD_THERAPEUTIC_AREA,case when CHILD_THERAPEUTIC_AREA = 'MULTIPLE SCLEROSIS' then 0 else 1 end as Therapeutic_Area_Flag
from TMP_WF_PAT_MARKET ) group by PARTY_SK

)),

survey_response as 
(Select * from 
(select distinct RESP_ANS.RESPONSE_ANSWER_SK AS SURVEY_RESPONSE_ID,
SRC_CODE.SOURCE_NAME AS SOURCE,
RES.SURVEY_FK AS SURVEY_IDS_ID,
PARTY.PARTY_MASTER_ID AS PARTY_MASTER_ID,
Party.Party_Fk,
TO_CHAR(RES.RESPONSE_DT,'MM/DD/YYYY') AS RESPONSE_DATE,
RESP_ANS.SURVEY_QUESTION_FK AS SURVEY_QUESTION_ID,
RESP_ANS.RESPONSE_VALUE AS SURVEY_RESPONSE_VALUE,
ROW_NUMBER() OVER(PARTITION BY Party.PARTY_FK ORDER BY RESPONSE_DT DESC) AS Row_id
FROM
DH_IDS.IDS_SURVEY_RESPONSE_ANSWER RESP_ANS
INNER JOIN
DH_IDS.IDS_SURVEY_RESPONSE RES
ON RESP_ANS.SURVEY_RESPONSE_FK = RES.SURVEY_RESPONSE_SK

LEFT OUTER JOIN
DH_IDS.IDS_SOURCE_CODE SRC_CODE
ON RES.SOURCE_FK = SRC_CODE.SOURCE_SK

INNER JOIN TMP_WF_PAT_PARTY PARTY
ON RES.PARTY_FK = PARTY.PARTY_FK
where RESP_ANS.RESPONSE_VALUE like '%AGE_RANGE%'
--where 
) 
 where  Row_id = 1 
 )
 
(select LS.Party_Fk ,nvl(LS.TRUE_SOURCE,LS.source_name) as Lead_Source,LS.CREATE_DT as Source_Dt, PM.CHILD_THERAPEUTIC_AREA,Prod_Seg.Product_Name,Prod_Seg.SEGMENTATION_CD,Prod_Seg.Code_value as Pat_Segment,'' as Stream 
from TMP_PF_MKTG_PARTY_FIRST_SRC LS, PM,
(select distinct Party_fk,Code_value,Product_brand_fk,SEGMENTATION_CD,Product_Name,'MULTIPLE SCLEROSIS' as Th_Area from DH_IDS.V_IDS_PARTY_SEGMENTATION SEGMENT
left join  DH_MKTG_IDS.V_MKTG_PRODUCT PRD on SEGMENT.Product_brand_fk = PRD.PRODUCT_SK
where SEGMENTATION_CD = 'Patient Lead Type') Prod_Seg
where PM.Party_Sk = LS.Party_Fk
and PM.Party_Sk = Prod_Seg.Party_fk
and Prod_Seg.Th_Area = PM.CHILD_THERAPEUTIC_AREA
) 


union all 

(select LS.Party_Fk ,nvl(LS.TRUE_SOURCE,LS.source_name) as Lead_Source,LS.CREATE_DT as Source_Dt, PM.CHILD_THERAPEUTIC_AREA,'ABOVE MS' as Product_Name,'Patient Lead Type' as SEGMENTATION_CD,
case when Max_Patient_Segment_flag = 3 then 'PATIENT' when Max_Patient_Segment_flag = 3 then 'PROSPECT' else 'NONE' end as Pat_Segment,'' as Stream from TMP_PF_MKTG_PARTY_FIRST_SRC LS,
 PM,
(select Party_fk,max(Patient_Segment_flag) as Max_Patient_Segment_flag  from (select distinct Party_fk,Code_value,SEGMENTATION_CD, case when upper(Code_value) = 'PATIENT' then 3 when upper(Code_value) = 'PROSPECT' then 2 else 1 end as Patient_Segment_flag from DH_IDS.V_IDS_PARTY_SEGMENTATION SEGMENT
where SEGMENTATION_CD = 'Patient Lead Type') group by Party_fk) Prod_Seg

where PM.Party_Sk = LS.Party_Fk
and PM.CHILD_THERAPEUTIC_AREA = 'MULTIPLE SCLEROSIS'
and PM.Party_Sk = Prod_Seg.Party_fk)

union all 

(select LS.Party_Fk ,nvl(LS.TRUE_SOURCE,LS.source_name) as Lead_Source,LS.CREATE_DT as Source_Dt, PM.CHILD_THERAPEUTIC_AREA,'VUMERITY' as Product_Name,'Patient Lead Type' as SEGMENTATION_CD,
'NONE' as Pat_Segment,'' as Stream from TMP_PF_MKTG_PARTY_FIRST_SRC LS,
 PM,
(select distinct Party_fk,Code_value,Product_brand_fk,SEGMENTATION_CD,Product_Name from DH_IDS.V_IDS_PARTY_SEGMENTATION SEGMENT
left join  DH_MKTG_IDS.V_MKTG_PRODUCT PRD on SEGMENT.Product_brand_fk = PRD.PRODUCT_SK
where SEGMENTATION_CD = 'Patient Lead Type' and upper( Product_Name) = 'VUMERITY')Prod_Seg
where PM.Party_Sk = LS.Party_Fk
and PM.Party_Sk = Prod_Seg.Party_Fk(+)
and PM.CHILD_THERAPEUTIC_AREA = 'MULTIPLE SCLEROSIS'
and Prod_Seg.Party_fk is null
)



union all

(select LS.Party_Fk ,nvl(LS.TRUE_SOURCE,LS.source_name) as Lead_Source,LS.CREATE_DT as Source_Dt, PM.CHILD_THERAPEUTIC_AREA,'SPINRAZA' as Product_Name,'' as SEGMENTATION_CD,
case when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age < 13) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_0_12') then 'Caregiver of Pediatric Patient' 
when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age < 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_13_17') then 'Caregiver of Adolscent Patient'
when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age >= 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_ADULT') then 'Caregiver of Adult Patient'
when upper(PATIENT_CLASS) = 'CAREGIVER' and SMA_Web_Reg_Flag = 1  then 'Other Caregivers who are Web-Registered'
when upper(PATIENT_CLASS) = 'CAREGIVER' then 'Other Caregivers and not Web-Registered'
when (upper(PATIENT_CLASS) = 'PATIENT' and Age < 13) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_0_12') then 'Pediatric Patient' 
when (upper(PATIENT_CLASS) = 'PATIENT' and Age < 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_13_17') then 'Adolscent Patient'
when (upper(PATIENT_CLASS) = 'PATIENT' and Age >= 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_ADULT') then 'Adult Patient'
when upper(PATIENT_CLASS) = 'PATIENT' and SMA_Web_Reg_Flag = 1  then 'Other Patients who are Web-Registered'
when upper(PATIENT_CLASS) = 'PATIENT' then 'Other Patients and not Web-Registered'
when upper(PATIENT_CLASS) not in ('PATIENT','CAREGIVER') and SMA_Web_Reg_Flag = 1  then 'Others who are Web-Registered'
else 'Others who are not Web-Registered' end as Pat_Segment,
case when  FIRST_INJECTION_DATE IS NOT NULL then 'Retention' 
when FIRST_INJECTION_DATE IS NULL and REFERRAL_RECEIVED_DATE IS NOT NULL then 'Queued'
when FIRST_INJECTION_DATE IS NULL and REFERRAL_RECEIVED_DATE IS NULL then 'Acquisition'  end as Stream
--SMA_Web_Reg_Flag,SURVEY_RESPONSE_VALUE,Patient_Class,Age
from TMP_PF_MKTG_PARTY_FIRST_SRC LS,
--TMP_WF_MS_SMA_PAT_MARKET2 PM,
 PM,  Survey_Response,
TMP_WF_PAT_PARTY Party,
(select *  from (
select distinct Customer_fk,source_cd,ATD.ACTIVITY_TYPE_NAME,upper(attribute_2_value) as Web_Lead_Source,
Case when (ROW_NUMBER() OVER(PARTITION BY Customer_fk,source_cd  ORDER BY Time_Fk desc)) > 1  then 'Y' else 'N' end Duplicate_flag,
1 as SMA_Web_Reg_Flag
 from DH_MKTG_IDS.MKTG_CUSTOMER_ACTIVITY_FACT   
 join DH_MKTG_IDS.MKTG_ACTIVITY_TYPE_DIM ATD on ACTIVITY_TYPE_FK = ATD.ACTIVITY_TYPE_SK
where source_cd like 'WEB_NEURO' and ATD.Activity_Type_Name in ('LOGIN','WEB REG') and attribute_2_value in ('SPINRAZA.COM')
) where Duplicate_flag = 'N')  SMA_web_reg,DM_SMA.SMA_CAMPAIGN_VARIABLES CV


where PM.Party_Sk = LS.Party_Fk
and PM.Party_Sk = Party.Party_fk
and PM.Party_Sk = Survey_Response.Party_fk(+)
and PM.Party_Sk = SMA_web_reg.Customer_fk(+)
and Party.PARTY_MASTER_ID = CV.MDMID(+)
and pm.child_therapeutic_area = 'SPINAL MUSCULAR ATROPHY')

union all 
 


(select LS.Party_Fk ,nvl(LS.TRUE_SOURCE,LS.source_name) as Lead_Source,LS.CREATE_DT as Source_Dt, PM.CHILD_THERAPEUTIC_AREA,'TOGETHER IN SMA' as Product_Name,'' as SEGMENTATION_CD,
case when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age < 13) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_0_12') then 'Caregiver of Pediatric Patient' 
when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age < 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_13_17') then 'Caregiver of Adolscent Patient'
when (upper(PATIENT_CLASS) = 'CAREGIVER' and Age >= 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'CAREGIVER' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_ADULT') then 'Caregiver of Adult Patient'
when upper(PATIENT_CLASS) = 'CAREGIVER' and SMA_Web_Reg_Flag = 1  then 'Other Caregivers who are Web-Registered'
when upper(PATIENT_CLASS) = 'CAREGIVER' then 'Other Caregivers and not Web-Registered'
when (upper(PATIENT_CLASS) = 'PATIENT' and Age < 13) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_0_12') then 'Pediatric Patient' 
when (upper(PATIENT_CLASS) = 'PATIENT' and Age < 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_13_17') then 'Adolscent Patient'
when (upper(PATIENT_CLASS) = 'PATIENT' and Age >= 18) or (Age IS NULL AND upper(PATIENT_CLASS) = 'PATIENT' and SURVEY_RESPONSE_VALUE = 'AGE_RANGE_ADULT') then 'Adult Patient'
when upper(PATIENT_CLASS) = 'PATIENT' and SMA_Web_Reg_Flag = 1  then 'Other Patients who are Web-Registered'
when upper(PATIENT_CLASS) = 'PATIENT' then 'Other Patients and not Web-Registered'
when upper(PATIENT_CLASS) not in ('PATIENT','CAREGIVER') and SMA_Web_Reg_Flag = 1  then 'Others who are Web-Registered'
else 'Others who are not Web-Registered' end as Pat_Segment,
case when  FIRST_INJECTION_DATE IS NOT NULL then 'Retention' 
when FIRST_INJECTION_DATE IS NULL and REFERRAL_RECEIVED_DATE IS NOT NULL then 'Queued'
when FIRST_INJECTION_DATE IS NULL and REFERRAL_RECEIVED_DATE IS NULL then 'Acquisition'  end as Stream
--SMA_Web_Reg_Flag,SURVEY_RESPONSE_VALUE,Patient_Class,Age
from TMP_PF_MKTG_PARTY_FIRST_SRC LS,
--TMP_WF_MS_SMA_PAT_MARKET2 PM,
PM, Survey_Response,
TMP_WF_PAT_PARTY Party,
(select *  from (
select distinct Customer_fk,source_cd,ATD.ACTIVITY_TYPE_NAME,upper(attribute_2_value) as Web_Lead_Source,
Case when (ROW_NUMBER() OVER(PARTITION BY Customer_fk,source_cd  ORDER BY Time_Fk desc)) > 1  then 'Y' else 'N' end Duplicate_flag,
1 as SMA_Web_Reg_Flag
 from DH_MKTG_IDS.MKTG_CUSTOMER_ACTIVITY_FACT   
 join DH_MKTG_IDS.MKTG_ACTIVITY_TYPE_DIM ATD on ACTIVITY_TYPE_FK = ATD.ACTIVITY_TYPE_SK
where source_cd like 'WEB_NEURO' and ATD.Activity_Type_Name in ('LOGIN','WEB REG') and attribute_2_value in ('TOGETHERINSMA.COM')
) where Duplicate_flag = 'N')  SMA_web_reg,DM_SMA.SMA_CAMPAIGN_VARIABLES CV


where PM.Party_Sk = LS.Party_Fk
and PM.Party_Sk = Party.Party_fk
and PM.Party_Sk = Survey_Response.Party_fk(+)
and PM.Party_Sk = SMA_web_reg.Customer_fk(+)
and Party.PARTY_MASTER_ID = CV.MDMID(+)
and pm.child_therapeutic_area = 'SPINAL MUSCULAR ATROPHY')
)
)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create Table TMP_WF_PAT_MERGE_RECORDS as 
(Select * from 
(
WITH GLOBAL_EXT_CRET AS (
SELECT DISTINCT A1.PARTY_FK AS PARTY_SK,
A2.MDM_KEY AS MDM_KEY, A2.PARTY_TYPE_CD_FK PARTY_TYPE_CD_FK,
MKT.LAST_LOAD_TS
FROM
(SELECT TRIM(PARTY_FK) AS PARTY_FK FROM DH_IDS.IDS_PARTY_PATIENT 
UNION
SELECT TRIM(PARTY_FK) AS PARTY_FK FROM DH_IDS.IDS_PARTY_CONTACT) A1
INNER JOIN

DH_IDS.IDS_PARTY A2
ON A1.PARTY_FK = A2.PARTY_SK
AND TRIM(A2.MDM_KEY) LIKE 'LH%'
AND A2.PRIMARY_COUNTRY_FK IN (SELECT COUNTRY_SK  FROM DH_RDM_PUBLISH.RDC_COUNTRY_CODE RDC_COUNTRY_CODE WHERE ISO_2_CD = 'US') -- Filter added as a part of ETL-1665
INNER JOIN

DH_IDS.IDS_PARTY_MARKET MKT
ON A2.PARTY_SK = MKT.PARTY_FK
AND MKT.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')
INNER JOIN

DH_IDS.IDS_THERAPEUTIC_AREA THPY
ON MKT.THERAPEUTIC_AREA_FK=THPY.THERAPEUTIC_AREA_SK
AND THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')

INNER JOIN
DH_IDS.IDS_THERAPEUTIC_AREA PAR_THPY
ON THPY.PARENT_THERAPEUTIC_AREA_FK = PAR_THPY.THERAPEUTIC_AREA_SK
AND PAR_THPY.THERAPEUTIC_AREA IN ('NEUROLOGY','HEMATOLOGY')
AND PAR_THPY.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')

/*INNER JOIN
DH_IDS.IDS_PARTY_ADDRESS ADDRESS
ON A2.PARTY_SK = ADDRESS.PARTY_FK
AND ADDRESS.COUNTRY_NAME='US'
AND ADDRESS.RECORD_STATE_CD_FK IN (SELECT CODE_SK FROM DH_IDS.IDS_CODE WHERE UPPER(TRIM(CODE_NAME))='ACTIVE' AND UPPER(ACTIVE_FLG)='Y')*/ -- Changed as a part of ETL-1665
)

SELECT DISTINCT 
'PAT' AS FEED_ORIGIN,
(SELECT MDM_KEY FROM DH_IDS.IDS_PARTY PARTY WHERE PARTY.PARTY_SK = MERGE_MAP.SURVIVOR_PARTY_FK AND PARTY.MDM_KEY LIKE 'LH%') NEW_MDM_ID,
(SELECT MDM_KEY FROM DH_IDS.IDS_PARTY PARTY WHERE PARTY.PARTY_SK = MERGE_MAP.NON_SURVIVOR_PARTY_FK  AND PARTY.MDM_KEY LIKE 'LH%') EXISTING_MDM_ID,
'PAT' AS PARTY_TYPE,
TO_CHAR(MERGE_MAP.SRC_MERGE_DT,'MM/DD/YYYY HH24:MI:SS') AS DATE_OF_MERGE,
(CASE TRIM(CODE.CODE_NAME) WHEN 'ACTIVE' THEN 'A'
WHEN 'INACTIVE' THEN 'I'
WHEN 'DELETED' THEN 'D'
ELSE '' END) AS RECORD_STATE,
SYSDATE AS ARCHIVAL_TS

FROM
DH_IDS.IDS_PARTY_MERGE_PURGE_MAP MERGE_MAP
INNER JOIN 
GLOBAL_EXT_CRET MKT 
ON MERGE_MAP.SURVIVOR_PARTY_FK = MKT.PARTY_SK
/*AND 
(MERGE_MAP.LAST_LOAD_TS > (SELECT EXTRACT_DATE FROM DH_ABC.T_DATE_PARAM_CTRL WHERE ETL_NAME = 'ETL_OUT_EXTGT_PAT_MDM_MERGE_DATE_PARAM_IDS_PARTY_MERGE_PURGE_MAP_DLY')
OR
MKT.LAST_LOAD_TS >  (SELECT EXTRACT_DATE FROM DH_ABC.T_DATE_PARAM_CTRL WHERE ETL_NAME = 'ET_PAT_PARTY_MERGE_PARTY_MKT'))
*/
LEFT OUTER JOIN
DH_IDS.IDS_CODE CODE
ON MERGE_MAP.RECORD_STATE_CD_FK = CODE.CODE_SK
))  
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create table TMP_WF_PAT_COMBINED as 

(Select WF.PARTY_FK,PARTY_MASTER_ID,WF.Product_Name,Pat_Segment,BIRTH_DATE, PATIENT_TYPE_CODE as Party_Type_Code, PARTY_TYPE, PATIENT_CLASS as Party_Class,Stream, PRIMARY_EMAIL, SUPPRESSED_CODE, RECORD_STATE, AGE, LEAD_SOURCE, THERAPEUTIC_AREA, 
 FEED_ORIGIN, IW_FLG, OPT_OUT_FLAG, BOUNCE_FLAG, ET_ACTIVE, TMP_SUPPRESSION_CRITERIA,
CREATE_DATE, OPT_OUT_DATE, MERGE_RECORD_DATE, BOUNCE_DATE, PARTY_SUPPRESSION_DATE, SUPPRESSION_CRITERIA, SUPPRESSION_SOURCE,SUPPRESSION_DATE,SOURCE_DT,
case when SUPPRESSION_CRITERIA in ('Blank/Invalid Email Address','Invalid Age','Kaiser Suppression') and SOURCE_DT < SUPPRESSION_DATE then SOURCE_DT else SUPPRESSION_DATE end as FINAL_SUPPRESSION_DATE,
case when SOURCE_DT > SUPPRESSION_DATE then SUPPRESSION_DATE else SOURCE_DT end as FINAL_SOURCE_DT,
  'Patient' as WF_Customer_Type
from
(
Select Comb.*, case when Party_Suppression_Date < Opt_Out_Date and Party_Suppression_Date < Merge_Record_Date and Party_Suppression_Date < Bounce_Date then Party_Suppression_Date
when Opt_Out_Date < Party_Suppression_Date and Opt_Out_Date < Merge_Record_Date and Opt_Out_Date < Bounce_Date and Opt_Out_Flag = 'Y' then Opt_Out_Date
when Merge_Record_Date < Party_Suppression_Date and Merge_Record_Date < Opt_Out_Date and Merge_Record_Date < Bounce_Date and ET_Active = 'N' then Merge_Record_Date
when Bounce_Date < Party_Suppression_Date and Bounce_Date < Opt_Out_Date and Bounce_Date < Merge_Record_Date and Bounce_Flag = 1 then Bounce_Date
when (Party_Suppression_Date is null and Opt_Out_Date is null and Merge_Record_Date is null and  Bounce_Date is null) then Source_Dt else Source_Dt end as Suppression_Date,

case when Party_Suppression_Date < Opt_Out_Date and Party_Suppression_Date < Merge_Record_Date and Party_Suppression_Date < Bounce_Date then TMP_Suppression_Criteria
when Opt_Out_Date < Party_Suppression_Date and Opt_Out_Date < Merge_Record_Date and Opt_Out_Date < Bounce_Date and Opt_Out_Flag = 'Y' then Product_Name || ' Opt Out'
when Merge_Record_Date < Party_Suppression_Date and Merge_Record_Date < Opt_Out_Date and Merge_Record_Date < Bounce_Date and ET_Active = 'N' then 'Merged Record'
when Bounce_Date < Party_Suppression_Date and Bounce_Date < Opt_Out_Date and Bounce_Date < Merge_Record_Date and Bounce_Flag = 1  then 'Held Record'
when (Party_Suppression_Date is null and Opt_Out_Date is null and Merge_Record_Date is null and  Bounce_Date is null) then 'Emailable Record' else TMP_Suppression_Criteria end as Suppression_Criteria,

case --when CREATE_DATE < Opt_Out_Date and CREATE_DATE < Merge_Record_Date and CREATE_DATE < Bounce_Date then 'Party_table'
when Opt_Out_Date < Party_Suppression_Date and Opt_Out_Date < Merge_Record_Date and Opt_Out_Date < Bounce_Date and Opt_Out_Flag = 'Y' then 'Opt table'
when Merge_Record_Date < Party_Suppression_Date and Merge_Record_Date < Opt_Out_Date and Merge_Record_Date < Bounce_Date and ET_Active = 'N' then 'Merge Table'
when Bounce_Date < Party_Suppression_Date and Bounce_Date < Opt_Out_Date and Bounce_Date < Merge_Record_Date and Bounce_Flag = 1 then 'Bounce Table'
when TMP_Suppression_Criteria <> 'Emailable Record' /*and Opt_Out_Flag <> 'Y' and ET_Active <> 'N' and Bounce_Flag <> 1*/  then 'Party Table'
when (Party_Suppression_Date is null and Opt_Out_Date is null and Merge_Record_Date is null and  Bounce_Date is null) then 'No Suppression' else 'No Suppression' end as Suppression_Source
from(
Select TMP_WF.*, case when Tmp_Suppression_Criteria not in ('Record State Inactive','Feed Origin Suppression','Party Type Suppression','Patient Class Suppression','Suppressed Record','Blank/Invalid Email Address',
'Invalid Age') then to_date('12/31/9999','MM/DD/YYYY') else CREATE_DATE end as Party_Suppression_Date
from 
(
Select PARTY_FK,PARTY_MASTER_ID, BIRTH_DATE, PATIENT_TYPE_CODE, PARTY_TYPE, PATIENT_CLASS,Stream, PRIMARY_EMAIL,SUPPRESSED_CODE, RECORD_STATE, AGE,
LEAD_SOURCE,CHILD_THERAPEUTIC_AREA as Therapeutic_Area,Product_Name,Pat_Segment,FEED_ORIGIN,IW_FLG,Opt_Out_Flag,Bounce_Flag,ET_Active,
case when RECORD_STATE <> 'A' then 'Record State Inactive' when FEED_ORIGIN <> 'PAT' then 'Feed Origin Suppression' when PARTY_TYPE <> 'PAT' then 'Party Type Suppression'
when PATIENT_CLASS not in ('Patient/Caregiver','Contact','Caregiver','Patient') then 'Patient Class Suppression' when SUPPRESSED_CODE <> 'N' then 'Suppressed Record' 
when (Primary_email is  null
OR  INSTR(LTRIM(RTRIM(PRIMARY_EMAIL)),' ') > 0
OR  SUBSTR(LTRIM(PRIMARY_EMAIL),1) = '@'
OR SUBSTR(RTRIM(PRIMARY_EMAIL),-1) = '.'
OR INSTR(PRIMARY_EMAIL,'.', INSTR('@',PRIMARY_EMAIL))- INSTR('@',PRIMARY_EMAIL ) = 1
OR LENGTH(LTRIM(RTRIM(PRIMARY_EMAIL )))- LENGTH(REPLACE(LTRIM(RTRIM(PRIMARY_EMAIL)),'@','')) > 1 
OR INSTR(REVERSE(LTRIM(RTRIM(PRIMARY_EMAIL))),'.') < 2
OR (INSTR('.@',PRIMARY_EMAIL) > 0
OR INSTR('..',PRIMARY_EMAIL) >0 ))  then 'Blank/Invalid Email Address' when AGE < 18 or pat_segment in ('Adolscent Patient', 'Pediatric Patient') then 'Invalid Age' 
when (upper(PRIMARY_EMAIL) LIKE  '%KP.ORG%' OR upper(PRIMARY_EMAIL) LIKE  '%KAISERPERMANENTE%' OR upper(PRIMARY_EMAIL) LIKE  '%KPCHR%' OR upper(PRIMARY_EMAIL) LIKE  '%KPEXPERIENCE.NET%' OR upper(PRIMARY_EMAIL) LIKE  '%KPONLINE.ORG%' 
OR upper(PRIMARY_EMAIL) LIKE  '%KAISERPERMANENTEJOBS.ORG%' OR upper(PRIMARY_EMAIL) LIKE  '%KPPP.COM%') then 'Kaiser Suppression'
when ET_Active = 'N' then 'Merged Record' 
when Opt_Out_Flag = 'Y' then PRODUCT_NAME || ' Opt Out' when Bounce_Flag = 1 then 'Held Record' else 'Emailable Record' end Tmp_Suppression_Criteria ,
SOURCE_DT,CREATE_DATE,case when OPT_OUT_DATE is null or  Opt_Out_Flag <> 'Y' then to_date('12/31/9999','MM/DD/YYYY') else OPT_OUT_DATE end as OPT_OUT_DATE ,
case when Merge_Record_Date is null or  ET_Active <> 'N' then to_date('12/31/9999','MM/DD/YYYY') else Merge_Record_Date end as Merge_Record_Date,
--nvl(Merge_Record_Date,to_date('12/31/9999','MM/DD/YYYY')) as Merge_Record_Date,
--nvl(Bounce_Date,to_date('12/31/9999','MM/DD/YYYY')) as Bounce_Date
case when Bounce_Date is null or  Bounce_Flag <> 1 then to_date('12/31/9999','MM/DD/YYYY') else Bounce_Date end as Bounce_Date
from 
(Select PAT.*, Source.Lead_Source,Source_Dt,Source.CHILD_THERAPEUTIC_AREA,Source.PRODUCT_NAME,Source.Pat_Segment,Source.Stream,IW_FLG,PROGRAM_NAME,Topic_Name,Opt_Out_Date,Opt_Out_Flag,Bounce_Flag,Bounce_Date,nvl(ET_Active, 'Y') as ET_Active,Merge_Record_Date,
PAT.Party_Fk || Source.PRODUCT_NAME as Unique_Identifier

from TMP_WF_PAT_SOURCE Source 
inner join TMP_WF_PAT_PARTY PAT on PAT.Party_Fk = Source.Party_Fk

left join (Select distinct PARTY_FK,IW_PROGRAM_FK,IW_TOPIC_FK,IW_FLG,upper(PROGRAM_NAME) as PROGRAM_NAME,Topic_Name,Opt_Out_Date, 
case when IW_FLG = 'N' then 'Y' else 'N' end as Opt_Out_Flag from (
Select distinct OPT.PARTY_FK,OPT.IW_PROGRAM_FK, OPT.IW_TOPIC_FK, OPT.IW_FLG,P.PROGRAM_NAME,T.Topic_Name,OPT.LAST_LOAD_TS as Opt_Out_Date,
ROW_NUMBER() OVER(PARTITION BY OPT.PARTY_FK,OPT.IW_PROGRAM_FK, OPT.IW_TOPIC_FK,P.PROGRAM_NAME,T.Topic_Name ORDER BY OPT.LAST_LOAD_TS DESC) AS Row_id
from DH_IDS.V_IDS_IW_SNAPSHOT OPT,DH_IDS.V_IDS_IW_PROGRAM P, DH_IDS.V_IDS_IW_TOPIC T
 where IW_PROGRAM_FK = IW_PROGRAM_SK
 and IW_TOPIC_FK = IW_TOPIC_SK
 and Upper(Channel_Cd) = 'EMAIL'
 and Upper(PROGRAM_NAME) in('AVONEX', 'PLEGRIDY' ,'TECFIDERA', 'TYSABRI', 'VUMERITY', 'ABOVE MS', 'SPINRAZA', 'TOGETHER IN SMA')
 and Upper(Topic_Name) = 'INFORMATIONAL'
 --group by OPT.PARTY_FK,OPT.IW_PROGRAM_FK, OPT.IW_TOPIC_FK, OPT.IW_FLG,P.PROGRAM_NAME,T.Topic_Name,OPT.LAST_LOAD_TS order by 8 desc,1
) where Row_id = 1 ) Opt_table
on PAT.PARTY_FK = Opt_table.Party_Fk  and upper(Source.Product_Name) = Opt_table.PROGRAM_NAME
left join (
(Select Customer_fk,Hard_Bounce_Count,Soft_Bounce_Count,Bounce_date,case when (Hard_Bounce_Count > 0 or Soft_Bounce_Count > 2) then 1 else 0 end as Bounce_Flag  from (
Select distinct Customer_fk, count(distinct (case when ATTRIBUTE_5_NAME  = 'BOUNCE_CATEGORY' and ATTRIBUTE_5_VALUE = 'Hard bounce' then Integration_Key end)) as Hard_Bounce_Count,
count(distinct (case when ATTRIBUTE_5_NAME  = 'BOUNCE_CATEGORY' and ATTRIBUTE_5_VALUE = 'Soft bounce' then Integration_Key end)) as Soft_Bounce_Count,
min(case when activity_type_fk = 245 and ATTRIBUTE_5_NAME  = 'BOUNCE_CATEGORY' and(ATTRIBUTE_5_VALUE = 'Soft bounce' or ATTRIBUTE_5_VALUE = 'Hard bounce') then Time_dt end) as Bounce_date
from DH_MKTG_IDS.MKTG_CUSTOMER_ACTIVITY_FACT MAF
join CDW.T_TIME_DIM TD on MAF.TIME_FK = TD.TIME_SK
group by Customer_fk
)))T_Bounce
  on PAT.PARTY_FK = T_Bounce.customer_fk
 left join (Select EXISTING_MDM_ID,Merge_Record_Date,'N' as ET_Active from (
Select Distinct EXISTING_MDM_ID ,to_date(Date_of_Merge,'MM/DD/YYYY HH24:MI:SS') as Merge_Record_Date ,
ROW_NUMBER() OVER (PARTITION BY EXISTING_MDM_ID ORDER BY to_date(Date_of_Merge,'MM/DD/YYYY HH24:MI:SS')) AS RANK
from TMP_WF_PAT_MERGE_RECORDS
) where RANK = 1) Merge_table on  PAT.PARTY_MASTER_ID = Merge_table.EXISTING_MDM_ID
)
) TMP_WF

) Comb
) WF
)

------------------------------------------------------------------------------------------------------------------------------------------------------------------
